type Query {
	test: String!
	user(id: Int!): User!
	admin: Admin!
	changeLogById(id: Int!): ChangeLog!
	changeLogs: [ChangeLog!]!
	latestChangeLog: ChangeLog!
	serverStatus: Boolean!
	chatGroup(id: Int!): ChatGroup!
	hasChat(userId: Int!, chatId: Int!): Boolean!
	getFeedback: [AppFeedback!]!
	feedbackById(id: Int!): AppFeedback!
	getMembers(chatId: Int!): [User!]!
	getMessages(chatId: Int!): [MessagesChats]!
	getNotifications(userId: Int!, type: String!): [Notification]!
}

type Mutation {
	sendForgotPasswordEmail(email: String!, origin: String): Boolean!
	signup(user: UserInput!): User!
	login(credentials: LoginInput!): LoginReturn
	sendAdminInvite(admin: AdminInviteInput!): Boolean!
	createAdmin(admin: AdminInput!): NewAdmin!
	adminLogin(credentials: AdminLoginInput!): LoginReturn
	verifyEmail(token: String!): Boolean!
	createChat(chat: CreateChatInput!): Chat!
	createChatGroup(chatGroup: CreateChatGroupInput!): ChatGroup!
	addNewChangeLog(newChangeLog: NewChangeLogInput!): ChangeLog!
	editChangeLog(id: Int!, changeLogEdit: NewChangeLogInput!): ChangeLog
	sendFeedback(feedback: SendAppFeedbackInput!): AppFeedback!
	deleteFeedback(id: Int!): Boolean!
	toggleFeedbackResolved(id: Int!, status: Boolean!): AppFeedback!
	updateUser(user: UpdateUserInput!, userId: Int): User!
	updateChatGroup(group: UpdateChatGroupInput, chatGroupId: Int!): ChatGroup!
	sendMessage(message: NewMessage!): Boolean!
	sendInvite(invite: SendInviteInput!): String!
	acceptInvite(acceptArgs: AcceptInviteInput!): Boolean!
	markNotificationAsRead(notificationId: Int!): Boolean!
	toggleUserOnline(status: Boolean, chatId: Int): Boolean!
}

type Subscription {
	messageSent(chatId: Int!): MessagesChats!
	activeChatUsers(chatId: Int!): ActiveUserReturn
}

type ActiveUserReturn {
	userId: Int!
	isOnline: Boolean!
}

input SendInviteInput {
	fromId: Int!
	uses: Int!
	to: [Int]!
	groupId: Int!
}

input AcceptInviteInput {
	userId: Int!
	code: String!
	notificationId: Int!
}

input NewMessage {
	body: String!
	authorUsername: String!
	authorId: Int!
	chatId: Int!
}

input AdminInviteInput {
	name: String!
	email: String!
}

input UpdateChatGroupInput {
	name: String
	isPublic: Boolean
	avatar: String
}

type AppFeedback {
	id: Int!
	createdAt: String!
	userName: String
	userEmail: String!
	resolved: Boolean!
	body: String!
	error: String
	sentryErrorUrl: String
	logRocketErrorUrl: String
}

input SendAppFeedbackInput {
	userName: String
	userEmail: String!
	body: String!
	error: String
	sentryErrorUrl: String
	logRocketErrorUrl: String
}

input CreateChatInput {
	name: String!
	isPublic: Boolean!
	userId: Int!
	icon: String!
	chatGroupId: Int!
}

input CreateChatGroupInput {
	name: String!
	isPublic: Boolean!
	userId: Int!
	avatar: String
}

input LoginInput {
	username: String
	email: String
	password: String!
}

input AdminLoginInput {
	username: String
	email: String
	password: String!
	pin: Int!
}

type Admin {
	id: Int!
	username: String!
	email: String!
	name: String!
	password: String!
	pin: Int!
	created_at: String!
	verified: Boolean!
	key: String!
}
type NewAdmin {
	id: Int!
	username: String!
	email: String!
	name: String!
	password: String!
	pin: Int!
	created_at: String!
	verified: Boolean!
	key: String!
	token: String!
}

type ChangeLog {
	id: Int!
	body: String!
	changes: [String!]!
	created_at: String!
	updated_at: String!
	version: String!
}

type LoginReturn {
	authenticated: Boolean!
	token: String!
}

input NewChangeLogInput {
	body: String!
	changes: [String!]!
	version: String!
}

input UserInput {
	email: String!
	name: String!
	username: String!
	password: String!
	avatar: String
}

input UpdateUserInput {
	email: String
	name: String
	username: String
	avatar: String
	password: String
}
input AdminInput {
	token: String!
	email: String!
	name: String!
	username: String!
	password: String!
	pin: Int!
}

type schema {
	query: Query
}

type User {
	id: Int!
	email: String!
	name: String!
	username: String!
	key: String!
	chatGroups: [ChatGroup!]!
	createdAt: String!
	verified: Boolean!
	avatar: String
	is_online: Boolean!
}

type ChatGroup {
	id: Int!
	name: String!
	isPublic: Boolean!
	createdAt: String!
	chats: [Chat]!
	createdBy: Int!
	avatar: String
	members: [User!]!
}

type Chat {
	id: Int!
	name: String!
	isPublic: Boolean!
	createdById: Int!
	messages: [MessagesChats]!
	icon: String!
}

type MessagesChats {
	id: Int!
	body: String!
	authorUsername: String!
	authorId: Int!
	chatId: Int!
	createdAt: String!
	author: User!
}

type GroupInvite {
	id: Int!
	fromId: Int!
	fromAuthor: User!
	code: String!
	uses: Int!
	used: Int!
	groupId: Int!
	group: ChatGroup!
}

type Notification {
	id: Int!
	userId: Int!
	description: String!
	type: String
	fromId: Int
	from: User
	createdAt: String!
	read: Boolean!
}
