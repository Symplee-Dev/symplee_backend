type Query {
	test: String!
	user(id: Int!): User!
	changeLogById(id: Int!): ChangeLog!
	changeLogs: [ChangeLog!]!
	serverStatus: Boolean!
	chatGroup(id: Int!): ChatGroup!
	hasChat(userId: Int!, chatId: Int!): Boolean!
	getFeedback: [AppFeedback!]!
	feedbackById(id: Int!): AppFeedback!
}

type Mutation {
	signup(user: UserInput!): User!
	login(credentials: LoginInput!): LoginReturn
	verifyEmail(token: String!): Boolean!
	createChat(chat: CreateChatInput!): Chat!
	createChatGroup(chatGroup: CreateChatGroupInput!): ChatGroup!
	addNewChangeLog(newChangeLog: NewChangeLogInput!): ChangeLog!
	editChangeLog(id: Int!, changeLogEdit: NewChangeLogInput!): ChangeLog
	sendFeedback(feedback: SendAppFeedbackInput!): AppFeedback!
	toggleFeedbackResolved(id: Int!, status: Boolean!): AppFeedback!
	updateUser(user: UpdateUserInput!, userId: Int!): User!
	updateChatGroup(group: UpdateChatGroupInput, chatGroupId: Int!): ChatGroup!
}

input UpdateChatGroupInput {
	name: String
	isPublic: Boolean
	avatar: String
}

type AppFeedback {
	id: Int!
	createdAt: String!
	userName: String
	userEmail: String!
	resolved: Boolean!
	body: String!
	error: String
	sentryErrorUrl: String
	logRocketErrorUrl: String
}

input SendAppFeedbackInput {
	userName: String
	userEmail: String!
	body: String!
	error: String
	sentryErrorUrl: String
	logRocketErrorUrl: String
}

input CreateChatInput {
	name: String!
	isPublic: Boolean!
	userId: Int!
	icon: String!
	chatGroupId: Int!
}

input CreateChatGroupInput {
	name: String!
	isPublic: Boolean!
	userId: Int!
	avatar: String
}

input LoginInput {
	username: String
	email: String
	password: String!
}

type ChangeLog {
	id: Int!
	body: String!
	changes: [String!]!
	created_at: String!
	updated_at: String!
	version: String!
}

type LoginReturn {
	authenticated: Boolean!
	token: String!
}

input NewChangeLogInput {
	body: String!
	changes: [String!]!
	version: String!
}

input UserInput {
	email: String!
	name: String!
	username: String!
	password: String!
	avatar: String
}

input UpdateUserInput {
	email: String
	name: String
	username: String
	avatar: String
}

type schema {
	query: Query
}

type User {
	id: Int!
	email: String!
	name: String!
	username: String!
	key: String!
	chatGroups: [ChatGroup!]!
	createdAt: String!
	verified: Boolean!
	avatar: String
}

type ChatGroup {
	id: Int!
	name: String!
	isPublic: Boolean!
	createdAt: String!
	chats: [Chat]!
	createdBy: Int!
	avatar: String
}

type Chat {
	id: Int!
	name: String!
	isPublic: Boolean!
	createdById: Int!
	messages: [Message]!
	icon: String!
}

type Message {
	id: Int!
	body: String!
	authorId: Int!
	chatId: Int!
	createdAt: String!
}
