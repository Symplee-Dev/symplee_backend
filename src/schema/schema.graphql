type Query {
	test: String!
	user(id: Int!): User
}

type Mutation {
	signup(user: UserInput!): User!
	login(credentials: LoginInput!): LoginReturn
}

input LoginInput {
	username: String
	email: String
	password: String!
}

type LoginReturn {
	authenticated: Boolean!
	token: String!
}

input UserInput {
	email: String!
	name: String!
	username: String!
	password: String!
}

type schema {
	query: Query
}

type User {
	id: Int!
	email: String!
	name: String!
	username: String!
	key: String!
	chatGroups: ChatGroup!
}

type ChatGroup {
	id: Int!
	name: String!
	isPublic: Boolean!
	createdAt: String!
	chats: [Chat]!
}

type Chat {
	id: Int!
	name: String!
	isPublic: Boolean!
	createdById: Int!
	messages: [Message]!
}

type Message {
	id: Int!
	body: String!
	authorId: String!
	chatId: String!
	createdAt: String!
}
