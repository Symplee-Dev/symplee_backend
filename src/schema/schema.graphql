type Query {
	test: String!
	user(id: Int!): User!
	admin: Admin!
	changeLogById(id: Int!): ChangeLog!
	changeLogs: [ChangeLog!]!
	latestChangeLog: ChangeLog!
	serverStatus: Boolean!
	chatGroup(id: Int!): ChatGroup!
	hasChat(userId: Int!, chatId: Int!): Boolean!
	getFeedback: [AppFeedback!]!
	feedbackById(id: Int!): AppFeedback!
	getMembers(chatId: Int!): [User!]!
	getMessages(chatId: Int!): [MessagesChats]!
	getNotifications(userId: Int!, type: String!): [Notification]!
	getFriends(userId: Int!, friendId: Int!): [UserFriend]!
	searchGroups(queryString: String!): [ChatGroup]!
	getProfile(userId: Int!, otherUserId: Int!): GetProfileReturn!
	getAcceptedFriends(userId: Int!): [UserFriend]!
	getPendingFriends(userId: Int!): [UserFriend]!
	getBlockedFriends(userId: Int!): [UserFriend]!
	getDMS(userId: Int!): [ChatGroup]!
}

type GetProfileReturn {
	user: User!
	relatedGroups: [ChatGroup]!
}

type Mutation {
	sendForgotPasswordEmail(email: String!, origin: String): Boolean!
	signup(user: UserInput!): User!
	login(credentials: LoginInput!): LoginReturn
	sendAdminInvite(admin: AdminInviteInput!): Boolean!
	createAdmin(admin: AdminInput!): NewAdmin!
	adminLogin(credentials: AdminLoginInput!): LoginReturn
	verifyEmail(token: String!): Boolean!
	createChat(chat: CreateChatInput!): Chat!
	createChatGroup(chatGroup: CreateChatGroupInput!): ChatGroup!
	createDM(dm: CreateDMInput!): ChatGroup!
	addNewChangeLog(newChangeLog: NewChangeLogInput!): ChangeLog!
	editChangeLog(id: Int!, changeLogEdit: NewChangeLogInput!): ChangeLog
	sendFeedback(feedback: SendAppFeedbackInput!): AppFeedback!
	deleteFeedback(id: Int!): Boolean!
	toggleFeedbackResolved(id: Int!, status: Boolean!): AppFeedback!
	updateUser(user: UpdateUserInput!, userId: Int): User!
	updateChatGroup(group: UpdateChatGroupInput, chatGroupId: Int!): ChatGroup!
	sendMessage(message: NewMessage!): Boolean!
	sendInvite(invite: SendInviteInput!): String!
	acceptInvite(acceptArgs: AcceptInviteInput!): Boolean!
	declineInvite(declineArgs: DeclineInviteInput!): Boolean!
	markNotificationAsRead(notificationId: Int!): Boolean!
	toggleUserOnline(status: Boolean): Boolean!
	addFriend(friendRequest: FriendRequestInput!): Boolean!
	removeFriend(friendId: Int!, userId: Int!): Boolean!
	acceptFriend(notificationId: Int!, invite: AcceptFriendInput!): Boolean!
	declineFriend(notificationId: Int!, invite: DeclineFriendInput!): Boolean!
	joinGroup(groupId: Int!, userId: Int!): Boolean!
	deleteGroup(chatGroupId: Int!): Boolean!
	deleteChatChannel(chatChannelId: Int!): Boolean!
	editMessage(message: InEditMessage!): MessagesChats!
	deleteMessage(messageId: Int!): Boolean!
	userTyping(chatId: Int!, userId: Int!, username: String!): Boolean!
	acceptInviteByLink(token: String!): ErrorCode!
	inviteByLink(
		userId: Int!
		groupId: Int!
		otherUserId: Int!
		uses: Int!
	): Boolean!
	blockUser(userId: Int!, otherUserId: Int!): Boolean!
	unblockUser(userId: Int!, otherUserId: Int!): Boolean!
}

enum ChatGroupType {
	CHAT_GROUP
	DM
}

enum ErrorCode {
	ALREADY_FAILURE
	SUCCESS
}

input DeclineFriendInput {
	userId: Int!
	fromId: Int!
}

input AcceptFriendInput {
	userId: Int!
	fromId: Int!
}

input FriendRequestInput {
	userId: Int!
	friendId: Int!
}

input InEditMessage {
	id: Int!
	body: String!
}

type Subscription {
	messageSent(chatId: Int!): MessagesChats!
	activeChatUsers(chatId: Int!): [User!]!
	messageEdited(chatId: Int!): MessagesChats!
	messageDeleted(chatId: Int!): Int!
	userTyping(chatId: Int!): UserTypingReturn
	mailboxUpdate(userId: Int!): UserMailbox!
}

type UserTypingReturn {
	userId: Int!
	username: String!
	chatId: Int!
}

input SendInviteInput {
	fromId: Int!
	uses: Int!
	to: [Int]!
	groupId: Int!
}

input AcceptInviteInput {
	userId: Int!
	code: String!
	notificationId: Int!
}

input DeclineInviteInput {
	userId: Int!
	code: String!
	notificationId: Int!
}

input NewMessage {
	body: String!
	authorUsername: String!
	authorId: Int!
	chatId: Int!
}

input AdminInviteInput {
	name: String!
	email: String!
}

input UpdateChatGroupInput {
	name: String
	isPublic: Boolean
	avatar: String
}

type AppFeedback {
	id: Int!
	createdAt: String!
	userName: String
	userEmail: String!
	resolved: Boolean!
	body: String!
	error: String
	sentryErrorUrl: String
	logRocketErrorUrl: String
}

input SendAppFeedbackInput {
	userName: String
	userEmail: String!
	body: String!
	error: String
	sentryErrorUrl: String
	logRocketErrorUrl: String
}

input CreateChatInput {
	name: String!
	isPublic: Boolean!
	userId: Int!
	icon: String!
	chatGroupId: Int!
	type: String
}

input CreateChatGroupInput {
	name: String!
	isPublic: Boolean!
	userId: Int!
	avatar: String
	type: ChatGroupType
}

input CreateDMInput {
	name: String!
	isPublic: Boolean!
	userId: Int!
	avatar: String
	type: ChatGroupType
	includes: [Int!]!
}

input LoginInput {
	username: String
	email: String
	password: String!
}

input AdminLoginInput {
	username: String
	email: String
	password: String!
	pin: Int!
}

type Admin {
	id: Int!
	username: String!
	email: String!
	name: String!
	password: String!
	pin: Int!
	created_at: String!
	verified: Boolean!
	key: String!
}
type NewAdmin {
	id: Int!
	username: String!
	email: String!
	name: String!
	password: String!
	pin: Int!
	created_at: String!
	verified: Boolean!
	key: String!
	token: String!
}

type ChangeLog {
	id: Int!
	body: String!
	changes: [String!]!
	created_at: String!
	updated_at: String!
	version: String!
}

type LoginReturn {
	authenticated: Boolean!
	token: String!
}

input NewChangeLogInput {
	body: String!
	changes: [String!]!
	version: String!
}

input UserInput {
	email: String!
	name: String!
	username: String!
	password: String!
	avatar: String
}

input UpdateUserInput {
	email: String
	name: String
	username: String
	avatar: String
	password: String
}
input AdminInput {
	token: String!
	email: String!
	name: String!
	username: String!
	password: String!
	pin: Int!
}

type schema {
	query: Query
}

type User {
	id: Int!
	email: String!
	name: String!
	username: String!
	key: String!
	chatGroups: [ChatGroup!]!
	createdAt: String!
	verified: Boolean!
	avatar: String
	is_online: Boolean!
}

type ChatGroup {
	id: Int!
	name: String!
	isPublic: Boolean!
	createdAt: String!
	chats: [Chat]!
	createdBy: Int!
	avatar: String
	members: [User!]!
	type: ChatGroupType
}

type Chat {
	id: Int!
	name: String!
	isPublic: Boolean!
	createdById: Int!
	messages: [MessagesChats]!
	icon: String!
	mode: String!
}

type MessagesChats {
	id: Int!
	body: String!
	authorUsername: String!
	authorId: Int!
	chatId: Int!
	createdAt: String!
	author: User!
}

type GroupInvite {
	id: Int!
	fromId: Int!
	fromAuthor: User!
	code: String!
	uses: Int!
	used: Int!
	groupId: Int!
	group: ChatGroup!
}

type Notification {
	id: Int!
	userId: Int!
	description: String!
	type: String
	fromId: Int
	from: User
	createdAt: String!
	read: Boolean!
	code: String
}

type UserFriend {
	id: Int!
	userId: Int!
	friendId: Int!
	friend: User
	friendsSince: String!
	status: String!
	sentBy: Int!
	blockedBy: Int
}

type UserMailbox {
	id: String!
	body: String!
	title: String!
	goTo: String!
	userId: Int!
}
